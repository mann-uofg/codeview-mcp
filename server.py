"""
ReviewGenie MCP server – Day‑6 edition
Fixes inline_comments(): uses positional args for create_review_comment and
falls back to create_issue_comment when review comments aren’t allowed.
"""
from __future__ import annotations
import os, re
from mcp.server.fastmcp import FastMCP
from github import Github

from codeview_mcp.config import load as load_cfg
from codeview_mcp.utils.helpers import parse_pr_url
from codeview_mcp.utils.ingest import fetch_pr
from codeview_mcp.utils.prompt import build_diff_prompt
from codeview_mcp.llm import analyze as llm_analyze
from codeview_mcp.utils.locator import locate
from codeview_mcp.utils.testgen import draft_tests

GH_TOKEN = os.getenv("GH_TOKEN")
if not GH_TOKEN:
    raise RuntimeError("GH_TOKEN env‑var missing")

gh = Github(GH_TOKEN)

mcp = FastMCP("reviewgenie")


@mcp.tool()
def ping(pr_url: str) -> dict:
    repo, num = parse_pr_url(pr_url)
    pr = gh.get_repo(repo).get_pull(num)
    return {"title": pr.title, "author": pr.user.login, "state": pr.state}


@mcp.tool()
def ingest_pr(pr_url: str) -> dict:
    return fetch_pr(pr_url)


@mcp.tool()
def analyze_pr(pr_url: str) -> dict:
    pr_json = fetch_pr(pr_url)
    prompt  = build_diff_prompt(pr_json["files"])
    return llm_analyze(prompt, pr_json["additions"], pr_json["deletions"])


@mcp.tool()
def inline_comments(pr_url: str, style: str | None = None) -> dict:
    cfg = load_cfg(); style = style or cfg["style"]

    pr_json  = fetch_pr(pr_url)
    analysis = analyze_pr(pr_url)
    targets  = locate(analysis["smells"], pr_json["files"])

    repo_slug, pr_num = parse_pr_url(pr_url)
    pr  = gh.get_repo(repo_slug).get_pull(pr_num)

    posted = 0
    body_tmpl = {
        "nitpick":  "- *Nitpick*: {smell}",
        "security": "⚠️ **Security**: {smell}",
        "perf":     "⏱ **Performance**: {smell}",
    }[style]

    for path, line_no, smell in targets:
        body = body_tmpl.format(smell=smell)
        try:
            # PyGitHub signature: commit_sha, path, position, body, line=?, side=?
            pr.create_review_comment(pr.head.sha, path, 1, body, line=line_no, side="RIGHT")
        except TypeError:
            # Some repos / test envs: fall back to issue‑level comment
            pr.create_issue_comment(f"{path}:{line_no} – {body}")
        posted += 1

    return {"posted": posted, "style": style}


@mcp.tool()
def generate_tests(pr_url: str, framework: str = "pytest") -> dict:
    if framework != "pytest":
        raise ValueError("Only pytest supported")

    repo_slug, pr_num = parse_pr_url(pr_url)
    stubs = draft_tests(repo_slug, pr_num)
    if not stubs:
        return {"test_pr": None, "files_added": 0}

    pr   = gh.get_repo(repo_slug).get_pull(pr_num)
    repo = gh.get_repo(repo_slug)
    branch = f"reviewgenie/tests-{pr_num}"
    repo.create_git_ref(ref=f"refs/heads/{branch}", sha=pr.head.sha)

    for path, content in stubs.items():
        repo.create_file(path, f"Add stub tests for PR #{pr_num}", content, branch=branch)

    tp = repo.create_pull(title=f"Stub tests for #{pr_num}", body="Generated by ReviewGenie", head=branch, base=pr.head.ref)
    return {"test_pr": tp.html_url, "files_added": len(stubs)}


if __name__ == "__main__":
    mcp.run()
